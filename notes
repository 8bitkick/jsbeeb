* All RMW instructions (INC, DEC, ROL, ROR, LSR, LSL)
  - [for indexed reads read non-carry-adjusted ram first]
  - then right place
  - then store old value
  - then store new value
  e.g. INC abs,x: abs == $0080, X = $ff, data zero
  [INC] [LO] [HI] [READ@007f] [READ@017f = 0] [WRITE@017f = 0] [WRITE@017f = 1] = 7
  e.g. INC abs,x: abs == $0080, X = $00, data zero
  [INC] [LO] [HI] [READ@007f] [READ@017f = 0] [WRITE@017f = 0] [WRITE@017f = 1] = 7
  e.g. INC abs abs = $80
  [INC] [LO] [HI] [READ@0080 = 0] [WRITE@0080 = 0] [WRITE@0080 = 1] = 6

* Read or write-only instructions
  - Still have spurious reads when crossing carry-bit
    LDA abs,x: abs - $0080, X = $ff
    [lda] [lo] [hi] [read@7f] [read@17f] = 5
  - if not cross break, early out
    LDA abs,x: abs - $0080, X = $00
    [lda] [lo] [hi] [read@7f] = 4

  STA abs, x: abs - $0080, X = $ff - spurios read. non-carry address
  [sta] [lo] [hi] [read@7f] [write@17f] 
  STA abs, x: abs - $0080, X = 0 - spurious read
  [sta] [lo] [hi] [read@80] [store@80]


- from Rich:
  * adc/sbc can be improved - DONE
    * sbc exactly same as adc val^ff
    * ovf = !!(a ^ result) & (val ^ result) & 0x80)
  * RTI, which has to have updated its flags from the stack *before* the checkInts, as that stack load happens on cycle 4 out of 6.  It all makes sense though.  With this done correctly, some of the weirder things should "just work", e.g. when an interrupt occurs during the first cycle of an SEI, the interrupt is taken immediately following the SEI, but the I flag is set in the status register that's pushed to the stack (so that the RTI returns and IRQs are disabled, as expected).  I don't think you should be clearing the I flag in the status register that's pushed in BRK, by the way (I know B-Em does, but I think it's wrong)... also BRK is getting an extra cycle.
